<template>
  <form action="" @submit.prevent="Save">
    <input-component
      label="Назва фільма"
      id="filmName"
      type="text"
      placeholder="Введіть назву фільма"
      v-model="filmName"
      :error="v$.filmName.$error ? 'Поле є обовязковим' : '' "
      @change="updateValue('filmName', $event.target.value)"
      />
      <input-component
      class="mt-3"
      label="Дата виходу"
      id="releaseDate"
      type="date"
      placeholder="Введіть дату виходу"
      v-model="releaseDate"
      :error="v$.releaseDate.$error ? 'Поле є обовязковим' : '' "
      @change="updateValue('releaseDate', $event.target.value)"
      />
      <textarea-component
      class="mt-3"
      label="Опис"
      id="filmDescription"
      type="textarea"
      placeholder="Введіть опис фільма"
      v-model="filmDescription"
      :error="v$.filmDescription.$error ? 'Поле є обовязковим' : '' "
      @change="updateValue('filmDescription', $event.target.value)"
    />
    <img-component v-model="mainPicture" :class="{'is-invalid': v$.mainPicture.$error}" class="mt-3" @deleteMainPicture="delImage"></img-component>
    <p v-if="v$.mainPicture.$error" class="error-message">Виберіть картинку</p>
    <imgs-component v-model="gallary" :class="{'is-invalid': v$.gallary.$error}" class="mt-3" @newImage="addImage" @delImage="delImage" @changeImage="changeImage"></imgs-component>
    <p v-if="v$.gallary.$error" class="error-message">Виберіть картинку</p>
    <input-component
      class="mt-3"
      label="Силка на трейлер"
      id="trailerLink"
      type="text"
      placeholder="Введіть силку на трейлер в youtube..."
      v-model="trailerLink"
      :error="v$.trailerLink.$error ? 'Поле є обовязковим' : '' "
      @change="updateValue('trailerLink', $event.target.value)"
    />
    <div class="form-group mt-3 ml-1">
      <p><strong>Тип фільма</strong></p>
      <div class="row" :class="{ 'is-invalid': v$.typeFilm.$error }">
        <checkbox-component v-model="typeFilm['3D']" id="3D" label="3D"></checkbox-component>
        <checkbox-component v-model="typeFilm['2D']" id="2D" label="2D"></checkbox-component>
        <checkbox-component
          v-model="typeFilm.IMAX"
          id="IMAX"
          label="IMAX"
        ></checkbox-component>
      </div>
      <p v-if="v$.typeFilm.$error" class="error-message">Виберіть тип фільма</p>
    </div>
    <seo-component v-model="SEO"></seo-component>
  </form>
</template>

<script>

import { useVuelidate } from '@vuelidate/core'
import { required } from '@vuelidate/validators'
import inputComponent from '@/components/UI/input-component.vue'
import textareaComponent from '@/components/UI/textarea-component.vue'
import imgComponent from '@/components/UI/img-component.vue'
import imgsComponent from '@/components/UI/imgs-component.vue'
import checkboxComponent from '@/components/UI/checkbox-component.vue'
import SeoComponent from '@/components/seo-component.vue'
import { CloudStorage } from '@/js/cloudStorage'
import { CloudFirestore } from '@/js/cloudFirestore'
export default {
  components: { inputComponent, imgComponent, imgsComponent, checkboxComponent, SeoComponent, textareaComponent },
  setup () {
    const v$ = useVuelidate()
    return { v$ }
  },
  data () {
    return {
      filmName: this.modelValue.filmName,
      releaseDate: this.modelValue.releaseDate,
      filmDescription: this.modelValue.filmDescription,
      mainPicture: this.modelValue.mainPicture || {},
      gallary: this.modelValue.gallary || [],
      trailerLink: this.modelValue.trailerLink,
      typeFilm: this.modelValue.typeFilm || {
        '3D': false,
        '2D': false,
        IMAX: false
      },
      SEO: this.modelValue.SEO || {
        link: '',
        title: '',
        keywords: '',
        description: ''
      },
      ListDeleteImages: [],
      cloudFirestore: new CloudFirestore(),
      cloudStorage: new CloudStorage()
    }
  },
  props: {
    modelValue: Object,
    errorMessages: Object
  },
  mounted () {
  },
  validations () {
    return {
      filmName: { required, $lazy: true },
      releaseDate: { required, $lazy: true },
      filmDescription: { required, $lazy: true },
      mainPicture: { required, $lazy: true },
      gallary: { required, $lazy: true },
      trailerLink: { required, $lazy: true },
      typeFilm: {
        required (value) {
          return Object.values(value).some(v => v)
        },
        $lazy: true
      }
    }
  },
  computed: {
    fileFolderPath () {
      return `films/${this.language}/${this.id}`
    }
  },
  methods: {
    addImage (newImage) {
      this.gallary.push(newImage)
    },
    delImage (value) {
      this.ListDeleteImages.push(value)
    },
    changeImage (newImage) {
      this.gallary = this.gallary.map(image =>
        image.id === newImage.id ? newImage : image)
    },
    updateValue (field, value) {
      if (this.modelValue) {
        const updatedModelValue = {
          ...this.modelValue,
          [field]: value
        }
        this.$emit('update:modelValue', updatedModelValue)
      }
    }
  },
  watch: {
    SEO: {
      handler (value) {
        this.updateValue('SEO', value)
      },
      deep: true
    },
    typeFilm: {
      handler (value) {
        this.updateValue('typeFilm', value)
      },
      deep: true
    },
    mainPicture (value) {
      this.updateValue('mainPicture', value)
    },
    gallary: {
      handler (value) {
        this.updateValue('gallary', value)
      },
      deep: true
    },
    modelValue: {
      handler (newValue) {
        this.filmName = newValue.filmName
        this.releaseDate = newValue.releaseDate
        this.filmDescription = newValue.filmDescription
        this.mainPicture = newValue.mainPicture || {}
        this.gallary = newValue.gallary || []
        this.trailerLink = newValue.trailerLink
        this.typeFilm = newValue.typeFilm || { '3D': false, '2D': false, IMAX: false }
        this.SEO = newValue.SEO
      },
      deep: true
    }
  }
}
</script>

<style>
.error-message {
  color: red;
  font-size: 0.8em;
  margin-top: 0.2em;
}

.is-invalid {
  border: 1px solid red;
  border-radius: 5px;
}
</style>
