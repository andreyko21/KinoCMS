<template>
  <card :title="title" :isLoading="isLoading">
    <template #tools>
      <div class="btn-group btn-group-toggle" data-toggle="buttons">
        <label
          v-for="language in languages"
          :key="language.id"
          class="btn btn-secondary"
          :class="{ active: language.checked }"
        >
          <input
            type="radio"
            name="options"
            :id="language.id"
            autocomplete="off"
            @click="changeLanguage(language.id)"
          />
          {{ language.name }}
        </label>
      </div>
    </template>
    <template #body>
     <addFilmC v-if="currenLanguage === 'Ua'" v-model="uaData"></addFilmC>
     <addFilmC v-else v-model="enData"></addFilmC>
     <button @click="Save" class="btn btn-xs btn-success col fileinput-button">
      <span>Зберегти</span>
    </button>
    </template>
    <template #footer>
      <span class="btn btn-xs btn-success col fileinput-button" @click="Save">
        <span>Зберегти</span>
      </span>
    </template></card
  >
</template>
<script>
import { required } from '@vuelidate/validators'
import { useVuelidate } from '@vuelidate/core'
import { CloudFirestore } from '@/js/cloudFirestore'
import { doc, collection } from 'firebase/firestore'
import { filmsCollectionRef } from '@/js/collections'
import { GenerateID } from '@/components/baners-page/add-file'
import card from '@/components/UI/card-component.vue'
import addFilmC from '@/components/films-page/add-film-form.vue'
import { file } from '@babel/types'

const filmDataValidations = {
  filmName: { required, $lazy: true },
  releaseDate: { required, $lazy: true },
  filmDescription: { required, $lazy: true },
  mainPicture: { required, $lazy: true },
  gallary: { required, $lazy: true },
  trailerLink: { required, $lazy: true },
  typeFilm: {
    required (value) {
      return Object.values(value).some(v => v)
    },
    $lazy: true
  },
  SEO: {
    link: { required, $lazy: true },
    title: { required, $lazy: true },
    keywords: { required, $lazy: true },
    description: { required, $lazy: true }
  }
}

export default {
  setup () {
    const v$ = useVuelidate()
    return { v$ }
  },
  data () {
    return {
      uaData: {},
      enData: {},
      fileFolderPath: `films/Ua/${this.id}`,
      id: null,
      isLoading: false,
      title: 'Фільм',
      languages: [
        { id: 0, name: 'Українська', value: 'Ua', checked: false },
        { id: 1, name: 'Англійська', value: 'En', checked: true }
      ],
      cloudFirestore: new CloudFirestore()
    }
  },
  async created () {
    this.GetFilm()
  },
  validations: {
    uaData: filmDataValidations,
    enData: filmDataValidations
  },
  components: {
    card,
    addFilmC
  },
  computed: {
    currenLanguage () {
      if (this.languages[0].checked === true) {
        return this.languages[0].value
      } else {
        return this.languages[1].value
      }
    },
    collectionRef () {
      const filmLanguageDocRef = doc(filmsCollectionRef, this.currenLanguage)
      const filmsRef = collection(filmLanguageDocRef, 'films')
      return filmsRef
    }
  },
  methods: {
    updateUaValue (field, value) {
      this.uaData[field] = value
    },
    updateEnValue (field, value) {
      this.enData[field] = value
      console.log(this.enData[field])
    },
    collection (language) {
      const filmLanguageDocRef = doc(filmsCollectionRef, language)
      const filmsRef = collection(filmLanguageDocRef, 'films')
      return filmsRef
    },
    GetFilm () {
      if (this.$route.params.id === 'New_Film') {
        this.id = GenerateID()
      } else {
        this.cloudFirestore.getDocument(this.collection('En'), this.$route.params.id).then((document) => {
          if (document) {
            Object.assign(this.enData, document)
            this.id = this.$route.params.id
          }
        })
        this.cloudFirestore.getDocument(this.collection('Ua'), this.$route.params.id).then((document) => {
          if (document) {
            Object.assign(this.uaData, document)
            this.id = this.$route.params.id
          } else {
            this.$router.push('New_Film')
            this.id = GenerateID()
          }
        })
      }
    },
    changeLanguage (id) {
      this.languages = this.languages.map(language => ({
        ...language,
        checked: language.id === id
      }))
    },
    DeleteImages (list, path) {
      if (list.length) {
        for (let i = 0; i < list.length; i++) {
          this.cloudStorage.DeleteFileInFirebaseStorage(path, list[i])
        }
        this.ListDeleteImages = []
      }
    },
    async UploadFile (fileObject, path) {
      if (fileObject.src) {
        fileObject.link = await this.cloudStorage.UploadFile(path, fileObject)
        delete fileObject.src
      } else {
        fileObject = {}
      }
    },
    async UploadFiles (files, path) {
      if (files.length) {
        for (let i = 0; i < files.length; i++) {
          if (files[i].src) {
            files[i].link = await this.cloudStorage.UploadFile(path, files[i])
            delete files[i].src
          }
        }
      }
    },
    async Save () {
      try {
        this.isLoading = true
        if (await this.v$.$validate()) {
          this.cloudFirestore.AddDocument(this.collectionRef, this.id, docData)
        }
        console.log('save')
        this.isLoading = false
      } catch (error) {
        const errorMessages = {
          unknown: 'Сталася невідома помилка при збереженні даних.'
        }
        const errorMessage =
        errorMessages[error.code] || 'Не вдалося зберегти дані.'
        throw new Error(errorMessage)
      }
    }
  }
}
</script>

<style></style>
